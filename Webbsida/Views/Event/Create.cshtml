@model Webbsida.ViewModels.CreateEventViewModel

@{
    ViewBag.Title = "Skapa nytt event";
}

<h2>Skapa ett nytt event</h2>

@*<form action="" method="post" enctype="multipart/form-data">*@
@using (Html.BeginForm("Create", "Event", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaxSignups, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MaxSignups, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxSignups, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MinSignups, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MinSignups, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MinSignups, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Price, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                <span>Exempel: tonåring, nya vänner, musik</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Image, new {type = "file", @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Image, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-8" id="map">

            </div>
        </div>


        @Html.HiddenFor(model => model.Latitude)
        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Longitude)
        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="col-md-12">
                <h4>Markera vart eventet ska hållas på kartan ovan, eller fyll i en adress nedan.</h4>
            </div>
        </div>

        <div class="form-group">
            <label for="input_address" class="control-label col-md-2">Adress:</label>
            <div class="col-md-10">

                <div class="input-group">
                    <input type="text" id="input_address" class="form-control" />
                    <span>
                        <button type="button" id="setMarkerFromAddressButton" class="btn btn-default">Sök denna adress!</button>
                    </span>
                </div>


            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Skapa event!" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Tillbaka", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBlemvE5X2QVIkrj0r4r_rJkLRilNdK9xg&callback=GoogleMapsEventController.initPickerMap"></script>
    <script>
        $(function () {
            document.getElementById('setMarkerFromAddressButton').addEventListener('click', function () {
                GoogleMapsEventController.setMarkerByUserInputAddress();
            });
        });

    </script>

    @Scripts.Render("~/scripts")
    @Styles.Render("~/Content/anypicker-all.min.css")


     <script type="text/javascript">

        function GetFormattedDate() {
            var rawDate = new Date();
            var month = rawDate.getMonth() + 1;
            var formattedMonth = ("0" + month).slice(-2);
            var formattedDays = ("0" + rawDate.getDate()).slice(-2);
            var formattedMinutes = ("0" + rawDate.getMinutes()).slice(-2);
            var formattedHours = ("0" + rawDate.getHours()).slice(-2);
            var result = rawDate.getFullYear() + "/" + formattedMonth + "/" + formattedDays + " " + formattedHours + ":" + formattedMinutes;
            return result.toString();
        }

            var todaysDate = GetFormattedDate();

            $(document).ready(function() {
                $("#StartDate").AnyPicker(
                {
                    mode: "datetime",
                    dateTimeFormat: "yyyy/MM/dd HH:mm",
                    theme: "Default",
                    minValue: todaysDate

                });
            });

        $(document).ready(function() {
            $("#EndDate").AnyPicker(
            {
                mode: "datetime",
                dateTimeFormat: "yyyy/MM/dd HH:mm",
                theme: "Default"

            });
        });

</script>
}